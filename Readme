This is the pyHYp README. Please read this before trying to compile/run.

----------------
 Prerequisites:
-----------------

1. CGNS
 
   The CGNS library is used to provide output CGNS functionality
   for pyHyp. This library MUST be installed before trying to compile
   pyHYp. CGNS version 2.5 is REQUIRED. Version 3.x WILL NOT WORK. A
   copy of the correct CGNS version is available on the sumb bitbucket
   site at 'https://bitbucket.org/mdolab/sumb/downloads'.  After
   cgns_2.5.tar.gz is downloaded untar using:

   $ tar -xzf cgns_2.5.tar.gz

   Enter cgnslib_2.5 and run the following:

   $ ./configure --enabled-shared 

   Then build the library using:

   $ make

   If you are compiling on machine without root access, you're done.
   If you are on a local machine with root access, it is usually
   easiest to 'install' into the default directory using:

   $ sudo make install

3. PETSc 

   PETSc --- The Portable Extensible Toolkit for Scientific Computing is
   required for pyHyp.

   Download petsc-3.2 from: http://www.mcs.anl.gov/petsc/download/index.html

   Untar the tar-ball using: (exact patch level may change)

   $ tar -xzf petsc-3.2-p[x].tar.gz

   PETSc must be first configured. There are a wide variety of
   options. The only ones that is strictly necessary are
   --with-shared-libraries and --with-fortran-interfaces. However, it
   is recommend the following options are used since some are required
   for pyWarp. To compile without debugging use:
   --with-debugging=no. It is HIGHLY recommended to use debugging
   until ready to perform production runs. In that case, you should
   compile with a SEPARATE architecture for the optimized build. In
   this case use '--PETSC_ARCH=real-opt' for example

   $ ./configure --with-shared-libraries --download-superlu_dist=yes --download-parmetis=yes --download-metis=yes --with-fortran-interfaces=1 --with-debuggig=yes --with-scalar-type=real --PETSC_ARCH=real-debug 

   After the configuration step, PETSc must be built. This is
   accomplished with the command provided at the end of the configure
   script. It will look something like below. DO NOT USE THIS
   PARTICULAR COMMAND!

   $ make PETSC_DIR=/home/gaetan/Downloads/petsc-3.3-p5 PETSC_ARCH=real-debug all

   The last step is to add PETSC_DIR and PETSC_ARCH entries to your
   .bashrc file. This is essential. It should look something like
   this: (Make sure the CORRECT directory is used!)

   export PETSC_ARCH=real-debug
   export PETSC_DIR=/home/user/packages/petsc-3.2-px
   
   Make sure the .bashrc file is sourced before pyHyp is compiled using:

   source ~/.bashrc

   Or simply open a new terminal before compiling pyHyp.

---------------------
   pyHyp -- Build
---------------------

   With all the prerequisites installed pyHyp can now be compiled. To
   begin type:

   $ make

   At the root pyHyp directory. A list of supported configurations will
   be displayed. Select the closest architecture and try a build using:

   $ make <ARCH>

   where <ARCH> is something like LINUX_INTEL_OPENMPI

   If this is successful and the end of output contains

   "module hyp was successfully imported"

   The pyHyp build was successful and we're done.

   If there was an issue compiling it will be necessary to modify the
   config file. When make <ARCH> is called the first time, a default
   configuration file for that architecture will be copied
   automatically into the ./config directory. Modify THIS file NOT the
   files in the config/default folder. If the cgns library was not
   installed, it will be necessary to specify the directory for the
   CGNS library. Other compile flags can be set in the this config
   file.

---------------------
   pyHyp -- Run
---------------------
   pyHyp contains several examples in the python/examples directory. 

   1. Sphere
   This is the most basic example. Compute the grid around a sphere. 
   There are seval different surface grids to try.

   2. Onera m6 

   Two surface grids are provided as well as a icem .blk adn .tin
   files used to generate the surface. This example must be run with:

   python runM6.py -pc_factor_levels 1

   3. BWB

   A single surface grid plus icem files are provided. This example
   must be run with:

   python runBWB.py -pc_factor_levels 1

   4. MDO tutorial (717)

   This example takes a 717 surface grid and uses DVGeometry to
   produce a winglet. Then this grid is extruded. This example must be
   run with: 
   
   python run717.py -pc_factor_levels 1