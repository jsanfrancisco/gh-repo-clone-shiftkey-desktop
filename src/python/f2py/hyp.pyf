    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module hyp ! in 
    interface  ! in :hyp
        module hypinput ! in :hyp:hypInput.f90
            use precision
            real(kind=realtype) :: epse
            real(kind=realtype) :: epsi
            real(Kind=realtype) :: theta
            real(kind=realtype) :: s0
            real(kind=realtype) :: ps0
            real(kind=realtype) :: pgridratio
            integer(kind=inttype) :: n
            integer(kind=inttype) :: volsmoothiter
            real(kind=realtype) :: slexp
            real(kind=realtype) :: volcoef
            real(kind=realtype) :: volblend
            real(kind=realtype) :: kspreltol
            logical :: writemirror
            logical :: nonlinear
            logical :: writemetrics
            integer(kind=inttype) :: kspmaxits, preconlag, kspsubspacesize
            real(kind=realtype) :: rmin
            real(kind=realtype) :: cmax
        end module hypinput

        module hypdata
          use precision
          integer(kind=inttype) :: nx, nxglobal, nghost
          real(kind=realtype), dimension(:, :), allocatable :: xsurf
          real(kind=realtype), dimension(:, :), allocatable :: xsurfglobal
          integer(kind=inttype), dimension(:, :), allocatable :: lnptr
          integer(kind=inttype), dimension(:, :), allocatable :: gnptr
          integer(kind=inttype), dimension(:, :), allocatable :: cptr
          integer(kind=inttype), dimension(:, :), allocatable :: conn
          integer(kind=inttype), dimension(:), allocatable :: ghost
        end module hypdata

        subroutine releasememory
        end subroutine releasememory

        ! Run Commands
        subroutine run2d(xin,nx) ! in :test:2D_code.F90
          real(kind=realtype) dimension(2,nx) :: xin
            integer(kind=inttype), optional,check(shape(xin,1)==nx),depend(xin) :: nx=shape(xin,1)
        end subroutine run2d

        subroutine init3d(sizes,nn)
            integer(kind=inttype) dimension(nn,2),intent(in) :: sizes
            integer(kind=inttype), optional,intent(in),check(shape(sizes,0)==nn),depend(sizes) :: nn=shape(sizes,0)
        end subroutine init3d
       
        subroutine setuppanels
        end subroutine setuppanels
 
        subroutine setlindex(ind_in,nnx,nny,ipatch) ! in :test:3D_code.F90
            integer(kind=inttype) dimension(nnx,nny),intent(in) :: ind_in
            integer(kind=inttype), optional,intent(in),check(shape(ind_in,0)==nnx),depend(ind_in) :: nnx=shape(ind_in,0)
            integer(kind=inttype), optional,intent(in),check(shape(ind_in,1)==nny),depend(ind_in) :: nny=shape(ind_in,1)
            integer(kind=inttype) intent(in) :: ipatch
        end subroutine setlindex

        subroutine run3d
        end subroutine run3d

        subroutine run3delliptic
        end subroutine run3delliptic

        subroutine pointreducewrap(pts,n,tol,uniquepts,link,nunique) ! in :test:3D_utilities.F90
          use precision
          real(kind=realtype) dimension(3,n),intent(in) :: pts
          integer(kind=inttype), optional,intent(in),check(shape(pts,1)==n),depend(pts) :: n=shape(pts,1)
          real(kind=realtype) intent(in) :: tol
          real(kind=realtype) dimension(3,n),intent(out),depend(n) :: uniquepts
          integer(kind=inttype) dimension(n),intent(out),depend(n) :: link
          integer(kind=inttype) intent(out) :: nunique
        end subroutine pointreducewrap

        ! grid output functions
        subroutine writecgns_2d(filename) 
            character*(*) :: filename
        end subroutine writecgns_2d

        subroutine writeplot3d_2d(filename) 
            character*(*) :: filename
        end subroutine writeplot3d_2d

        subroutine writecgns_3d(filename) 
            character*(*) :: filename
        end subroutine writecgns_3d

        subroutine zeromirrorplane(filename,mirrorlist,mirrordim,nmirror) ! in :test:writeCGNS_3d.F90
          character*(*) intent(in) :: filename
          integer(kind=inttype) dimension(nmirror,3),intent(in) :: mirrorlist
          integer(kind=inttype) intent(in) :: mirrordim
          integer(kind=inttype), optional,intent(in),check(shape(mirrorlist,0)==nmirror),depend(mirrorlist) :: nmirror=shape(mirrorlist,0)
        end subroutine zeromirrorplane

        subroutine initpetsc(comm)
          integer(kind=intType) :: comm
        end subroutine initpetsc

        subroutine writeplot3d_3d(filename) 
            character*(*) :: filename
        end subroutine writeplot3d_3d

     end interface
end python module hyp

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
