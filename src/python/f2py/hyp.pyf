!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module hyp ! in 
    interface  ! in :hyp
        module hypinput ! in :hyp:hypInput.f90
            use precision
            real(kind=realtype) :: epse
            real(kind=realtype) :: epsi
            real(kind=realtype) :: s0
            real(kind=realtype) :: ps0
            integer(kind=inttype) :: n
            integer(kind=inttype) :: nmax
            integer(kind=inttype) :: volsmoothiter
            real(kind=realtype) :: gridratio
            real(kind=realtype) :: pgridratio
            real(kind=realtype) :: theta
            real(kind=realtype) :: volcoef
            real(kind=realtype) :: volblend
            real(kind=realtype) :: kspreltol
            integer(kind=inttype) :: kspmaxits, preconlag, kspsubspacesize
            real(kind=realtype) :: rmin
        end module hypinput

        subroutine releasememory
        end subroutine releasememory

        ! Run Commands
        subroutine run2d(xin,nx) ! in :test:2D_code.F90
          real(kind=realtype) dimension(2,nx) :: xin
            integer(kind=inttype), optional,check(shape(xin,1)==nx),depend(xin) :: nx=shape(xin,1)
        end subroutine run2d
        subroutine init3d(sizes,nn,nptr_in,lmax,nglobal) ! in :test:3D_code.F90
            use hypdata
            use hypinput
            integer(kind=inttype) dimension(nn,2),intent(in) :: sizes
            integer(kind=inttype), optional,intent(in),check(shape(sizes,0)==nn),depend(sizes) :: nn=shape(sizes,0)
            integer(kind=inttype) dimension(lmax,nglobal),intent(in) :: nptr_in
            integer(kind=inttype), optional,intent(in),check(shape(nptr_in,0)==lmax),depend(nptr_in) :: lmax=shape(nptr_in,0)
            integer(kind=inttype), optional,intent(in),check(shape(nptr_in,1)==nglobal),depend(nptr_in) :: nglobal=shape(nptr_in,1)
        end subroutine init3d

        subroutine setlindex(ind_in,nx,ny,ipatch) ! in :test:3D_code.F90
            integer(kind=inttype) dimension(nx,ny),intent(in) :: ind_in
            integer(kind=inttype), optional,intent(in),check(shape(ind_in,0)==nx),depend(ind_in) :: nx=shape(ind_in,0)
            integer(kind=inttype), optional,intent(in),check(shape(ind_in,1)==ny),depend(ind_in) :: ny=shape(ind_in,1)
            integer(kind=inttype) intent(in) :: ipatch
        end subroutine setlindex

        subroutine run3d(xin,nx,xout) ! in :test:3D_code.F90
          real(kind=realtype) dimension(3,nx) :: xin
          integer(kind=inttype), optional,check(shape(xin,1)==nx),depend(xin) :: nx=shape(xin,1)
          real(kind=realtype) intent(out), dimension(3,nx) :: xout
        end subroutine run3d

        ! Grid output functions
        subroutine writecgns_2d(filename) 
            character*(*) :: filename
        end subroutine writecgns_2d

        subroutine writeplot3d_2d(filename) 
            character*(*) :: filename
        end subroutine writeplot3d_2d

        subroutine writecgns_3d(filename) 
            character*(*) :: filename
        end subroutine writecgns_3d

        subroutine writecgns_3dorig(filename) 
          character*(*) :: filename
        end subroutine writecgns_3dorig

        subroutine writeplot3d_3d(filename) 
            character*(*) :: filename
        end subroutine writeplot3d_3d

     end interface
end python module hyp

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
