!    -*- f90 -*-
python module hyp ! in 
    interface  ! in :hyp
        module hypinput ! in :hyp:hypInput.f90
            use precision
            real(kind=realtype) :: epse
            real(kind=realtype) :: epsi
            real(Kind=realtype) :: theta
            real(kind=realtype) :: s0
            real(kind=realtype) :: ps0
            real(kind=realtype) :: pgridratio
            integer(kind=inttype) :: n
            integer(kind=inttype) :: volsmoothiter
            real(kind=realtype) :: slexp
            real(kind=realtype) :: volcoef
            real(kind=realtype) :: volblend
            real(kind=realtype) :: kspreltol
            logical :: nonlinear
            logical :: writemetrics
            integer(kind=inttype) :: kspmaxits, preconlag, kspsubspacesize
            real(kind=realtype) :: rmin
            real(kind=realtype) :: cmax
            real(kind=realtype) :: nodetol
            real(kind=realtype) :: symtol
            integer(kind=inttype) :: mirrortype
            integer(kind=inttype), parameter :: nomirror = 0
            integer(kind=inttype), parameter :: xmirror = 1
            integer(kind=inttype), parameter :: ymirror = 2
            integer(kind=inttype), parameter :: zmirror = 3
            logical :: usematrixfree
            real(kind=realtype) :: farfieldtol
            integer(kind=inttype) :: evalmode
            integer(kind=inttype), parameter,optional :: eval_slow=1
            integer(kind=inttype), parameter,optional :: eval_fast=2
            integer(kind=inttype), parameter,optional :: eval_exact=0
            character(len=512) :: sourcestrengthfile
        end module hypinput

        subroutine releasememory
        end subroutine releasememory

        subroutine setup(filename)
          character*(*) :: filename
        end subroutine setup
        
        subroutine setuppanels
        end subroutine setuppanels
 
        subroutine runhyperbolic
        end subroutine runhyperbolic

        subroutine runelliptic
        end subroutine runelliptic

        subroutine smoothwrap(nsteps, stepsize)
          integer(kind=inttype) :: nsteps
          real(kind=realtype) :: stepsize
        end subroutine smoothwrap

        subroutine writecgns(filename) 
          character*(*) :: filename
        end subroutine writecgns

        subroutine freezeedge(blockid,edge,dstar) ! in :test:smoothing.F90
          integer(kind=inttype) intent(in) :: blockid
          character*(*) :: edge
          real(kind=realtype) intent(in) :: dstar
        end subroutine freezeedge

        subroutine freezefaces(blockids,nblockids,dstar) ! in :test:smoothing.F90
          integer(kind=inttype) dimension(nblockids),intent(in) :: blockids
          integer(kind=inttype), optional,intent(in),check(len(blockids)>=nblockids),depend(blockids) :: nblockids=len(blockids)
          real(kind=realtype) intent(in) :: dstar
        end subroutine freezefaces

        subroutine zeromirrorplane(filename)
          character*(*) intent(in) :: filename
        end subroutine zeromirrorplane

        subroutine initpetsc(comm)
          integer(kind=intType) :: comm
        end subroutine initpetsc
        
        subroutine writeplot3d(filename) 
            character*(*) :: filename
          end subroutine writeplot3d

        subroutine writelayerplot3d(filename, layer)
          character*(*) :: filename
          integer(kind=inttype) :: layer
        end subroutine writelayerplot3d

        subroutine writelayerfe(filename, layer, partitions)
          character*(*) :: filename
          integer(kind=inttype) :: layer
          logical :: partitions
        end subroutine writelayerfe

        subroutine allocatesurfaces(nsurf) ! in :test:reproject.f90
            integer(kind=inttype) intent(in) :: nsurf
        end subroutine allocatesurfaces
        subroutine setsurface(isurf,ku,kv,tu,tv,coef,nctlu,nctlv) ! in :test:reproject.f90
            integer(kind=inttype) intent(in) :: isurf
            integer(kind=inttype) intent(in) :: ku
            integer(kind=inttype) intent(in) :: kv
            real(kind=realtype) dimension(nctlu+ku),intent(in),depend(ku,nctlu) :: tu
            real(kind=realtype) dimension(nctlv+kv),intent(in),depend(kv,nctlv) :: tv
            real(kind=realtype) dimension(3,nctlv,nctlu),intent(in) :: coef
            integer(kind=inttype), optional,intent(in),check(shape(coef,2)==nctlu),depend(coef) :: nctlu=shape(coef,2)
            integer(kind=inttype), optional,intent(in),check(shape(coef,1)==nctlv),depend(coef) :: nctlv=shape(coef,1)
        end subroutine setsurface

     end interface
end python module hyp

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
